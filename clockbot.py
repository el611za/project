import asyncio
import logging
from datetime import datetime, timedelta
import random
import string
import os
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler()  # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = '8130975273:AAE6GDAcZsmUCTQOJ3kfim0680SPYtAnmVQ'  # –í–∞—à Telegram —Ç–æ–∫–µ–Ω
ADMIN_ID = 50371663  # –í–∞—à Telegram ID
DATA_DIR = 'data'  # –ü–∞–ø–∫–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤
DATA_FILE = os.path.join(DATA_DIR, 'clients.txt')
USERS_FILE = os.path.join(DATA_DIR, 'users.txt')
USED_CODES_FILE = os.path.join(DATA_DIR, 'used_codes.txt')
PROMO_FILE = os.path.join(DATA_DIR, 'promotions.txt')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
last_promo_text = "–ê–∫—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã."
last_clients = {}
last_users = set()
last_used_codes = set()
user_context = {}
pending_requests = {}
pending_spend_requests = {}

# –§–∞–∫—Ç—ã –æ —á–∞—Å–∞—Ö
facts_for_clock = [
    '–ü–µ—Ä–≤—ã–µ —á–∞—Å—ã: –°–∞–º—ã–µ —Ä–∞–Ω–Ω–∏–µ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ —á–∞—Å—ã –ø–æ—è–≤–∏–ª–∏—Å—å –≤ –ï–≤—Ä–æ–ø–µ –≤ XIII –≤–µ–∫–µ. –û–Ω–∏ –±—ã–ª–∏ –±–æ–ª—å—à–∏–º–∏ –±–∞—à–µ–Ω–Ω—ã–º–∏ —á–∞—Å–∞–º–∏, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –≤ —Ü–µ—Ä–∫–≤—è—Ö –∏ –º–æ–Ω–∞—Å—Ç—ã—Ä—è—Ö.',
    '–ö–∞—Ä–º–∞–Ω–Ω—ã–µ —á–∞—Å—ã: –í XVI –≤–µ–∫–µ –Ω–µ–º–µ—Ü–∫–∏–π —á–∞—Å–æ–≤—â–∏–∫ –ü–∏—Ç–µ—Ä –•–µ–Ω–ª—è–π–Ω —Å–æ–∑–¥–∞–ª –ø–µ—Ä–≤—ã–µ –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–ª–∏ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞—Ä—É—á–Ω—ã—Ö —á–∞—Å–æ–≤.',
    '–ù–∞—Ä—É—á–Ω—ã–µ —á–∞—Å—ã: –ù–∞—Ä—É—á–Ω—ã–µ —á–∞—Å—ã —Å—Ç–∞–ª–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ XX –≤–µ–∫–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ—Å–ª–µ –ü–µ—Ä–≤–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω—ã, –∫–æ–≥–¥–∞ —Å–æ–ª–¥–∞—Ç—ã –æ—Ü–µ–Ω–∏–ª–∏ –∏—Ö —É–¥–æ–±—Å—Ç–≤–æ.',
    '–ö–≤–∞—Ä—Ü–µ–≤—ã–π –ø—Ä–æ—Ä—ã–≤: –í 1969 –≥–æ–¥—É –∫–æ–º–ø–∞–Ω–∏—è Seiko –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –ø–µ—Ä–≤—ã–µ –∫–≤–∞—Ä—Ü–µ–≤—ã–µ —á–∞—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–±–µ—Å–ø–µ—á–∏–ª–∏ –Ω–µ–±—ã–≤–∞–ª—É—é —Ç–æ—á–Ω–æ—Å—Ç—å —Ö–æ–¥–∞.',
    '–°–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ —á–∞—Å—ã: –ß–∞—Å—ã Graff Diamonds Hallucination —Å—Ç–æ—è—Ç 55 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –¥–æ–ª–ª–∞—Ä–æ–≤ –∏ —É–∫—Ä–∞—à–µ–Ω—ã 110 –∫–∞—Ä–∞—Ç–∞–º–∏ —Ä–µ–¥–∫–∏—Ö –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤.',
    '–ß–∞—Å—ã –≤ –∫–æ—Å–º–æ—Å–µ: Omega Speedmaster Professional —Å—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã–º–∏ —á–∞—Å–∞–º–∏, –ø–æ–±—ã–≤–∞–≤—à–∏–º–∏ –Ω–∞ –õ—É–Ω–µ –≤–æ –≤—Ä–µ–º—è –º–∏—Å—Å–∏–∏ Apollo 11 –≤ 1969 –≥–æ–¥—É.',
    '–ê–Ω—Ç–∏–∫–≤–∞—Ä–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: –ß–∞—Å—ã Patek Philippe Henry Graves Supercomplication, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤ 1933 –≥–æ–¥—É, –±—ã–ª–∏ –ø—Ä–æ–¥–∞–Ω—ã –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ –∑–∞ 24 –º–∏–ª–ª–∏–æ–Ω–∞ –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ 2014 –≥–æ–¥—É.',
    '–í–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å: –ü–µ—Ä–≤—ã–µ –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—ã–µ —á–∞—Å—ã, Rolex Oyster, –±—ã–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ 1926 –≥–æ–¥—É. –ò—Ö –∏—Å–ø—ã—Ç–∞–ª–∞ –ø–ª–æ–≤—á–∏—Ö–∞ –ú–µ—Ä—Å–µ–¥–µ—Å –ì–ª—è–π—Ç—Ü–µ, –ø–µ—Ä–µ–ø–ª—ã–≤ –õ–∞-–ú–∞–Ω—à.',
    '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ö–∞–Ω–∏–∑–º: –ü–µ—Ä–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —á–∞—Å—ã —Å –∞–≤—Ç–æ–ø–æ–¥–∑–∞–≤–æ–¥–æ–º –±—ã–ª–∏ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω—ã –≤ 1770 –≥–æ–¥—É, –Ω–æ –º–∞—Å—Å–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –Ω–∞—á–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –≤ XX –≤–µ–∫–µ.',
    '–ß–∞—Å—ã –±–µ–∑ —Å—Ç—Ä–µ–ª–æ–∫: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±—Ä–µ–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ Ressence, —Å–æ–∑–¥–∞—é—Ç —á–∞—Å—ã –±–µ–∑ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–µ–ª–æ–∫, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Ä–∞—â–∞—é—â–∏–µ—Å—è –¥–∏—Å–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.',
    '–®–≤–µ–π—Ü–∞—Ä—Å–∫–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ: –®–≤–µ–π—Ü–∞—Ä–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –æ–∫–æ–ª–æ 30 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —á–∞—Å–æ–≤ –≤ –≥–æ–¥, —á—Ç–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ª–∏—à—å 2% –æ—Ç –º–∏—Ä–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –Ω–æ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç –≤ —Å–µ–≥–º–µ–Ω—Ç–µ –ª—é–∫—Å–æ–≤—ã—Ö —á–∞—Å–æ–≤.',
    '–ß–∞—Å—ã —Å —Ç—É—Ä–±–∏–π–æ–Ω–æ–º: –¢—É—Ä–±–∏–π–æ–Ω, –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–π –≤ 1795 –≥–æ–¥—É –ê–±—Ä–∞—Ö–∞–º–æ–º-–õ—É–∏ –ë—Ä–µ–≥–µ—Ç–æ–º, –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏, –ø–æ–≤—ã—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö —á–∞—Å–æ–≤.',
    '–°–æ–ª–Ω–µ—á–Ω—ã–µ —á–∞—Å—ã: –°–∞–º—ã–µ –¥—Ä–µ–≤–Ω–∏–µ —á–∞—Å—ã ‚Äî —Å–æ–ª–Ω–µ—á–Ω—ã–µ ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –µ—â–µ –≤ –î—Ä–µ–≤–Ω–µ–º –ï–≥–∏–ø—Ç–µ –æ–∫–æ–ª–æ 1500 –≥–æ–¥–∞ –¥–æ –Ω.—ç.',
    '–ê—Ç–æ–º–Ω—ã–µ —á–∞—Å—ã: –°–∞–º—ã–µ —Ç–æ—á–Ω—ã–µ —á–∞—Å—ã –≤ –º–∏—Ä–µ, –∞—Ç–æ–º–Ω—ã–µ, –æ—à–∏–±–∞—é—Ç—Å—è –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É –∑–∞ 100 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ª–µ—Ç. –û–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ GPS –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.',
    '–£–º–Ω—ã–µ —á–∞—Å—ã: –ü–µ—Ä–≤—ã–µ —Å–º–∞—Ä—Ç-—á–∞—Å—ã, IBM WatchPad, –ø–æ—è–≤–∏–ª–∏—Å—å –≤ 2001 –≥–æ–¥—É, –Ω–æ –Ω–∞—Å—Ç–æ—è—â—É—é –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —ç—Ç–æ—Ç —Å–µ–≥–º–µ–Ω—Ç –æ–±—Ä–µ–ª —Å –≤—ã—Ö–æ–¥–æ–º Apple Watch –≤ 2015 –≥–æ–¥—É.'
]

dp = Dispatcher()
bot = Bot(token=API_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
def init_files():
    os.makedirs(DATA_DIR, exist_ok=True)
    for file in [DATA_FILE, USERS_FILE, USED_CODES_FILE, PROMO_FILE]:
        if not os.path.exists(file):
            with open(file, 'w', encoding='utf-8') as f:
                if file == PROMO_FILE:
                    f.write("–ê–∫—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n")
            logging.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {file}")

# –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
async def read_file(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        logging.warning(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π")
        with open(file_path, 'w', encoding='utf-8') as f:
            pass
        return ""
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        return ""

async def write_file(file_path, content):
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        logging.info(f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {file_path}: {e}")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def today_str():
    return datetime.now().strftime("%Y-%m-%d")

def is_expired(date_str):
    try:
        date = datetime.strptime(date_str, "%Y-%m-%d")
        return (datetime.now() - date) > timedelta(days=180)
    except ValueError:
        logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}")
        return True

async def get_promo_text():
    global last_promo_text
    content = await read_file(PROMO_FILE)
    last_promo_text = content.strip() if content.strip() else "–ê–∫—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã."
    return last_promo_text

async def load_clients():
    global last_clients
    content = await read_file(DATA_FILE)
    clients = {}
    lines = content.splitlines()
    i = 0
    while i < len(lines):
        line = lines[i].strip()
        if not line:
            i += 1
            continue
        if not line.startswith("bonus:"):
            parts = line.split(",")
            if len(parts) >= 2:
                code = parts[0]
                clients[code] = {
                    "code": code,
                    "telegram_id": parts[1],
                    "bonuses": []
                }
        else:
            bonus_parts = line.split(":")
            if len(bonus_parts) == 3 and 'code' in locals():
                if not is_expired(bonus_parts[2]):
                    clients[code]["bonuses"].append({
                        "amount": int(bonus_parts[1]),
                        "date": bonus_parts[2]
                    })
        i += 1
    last_clients = clients
    return clients

async def save_clients(clients):
    global last_clients
    content = ''
    for client in clients.values():
        valid_bonuses = [b for b in client["bonuses"] if not is_expired(b["date"])]
        client["bonuses"] = valid_bonuses
        content += f"{client['code']},{client['telegram_id']}\n"
        for b in valid_bonuses:
            content += f"bonus:{b['amount']}:{b['date']}\n"
    await write_file(DATA_FILE, content)
    last_clients = clients

async def add_user_id(user_id):
    global last_users
    user_id = str(user_id)
    content = await read_file(USERS_FILE)
    users = set(content.splitlines())
    if user_id not in users:
        users.add(user_id)
        await write_file(USERS_FILE, "\n".join(users) + "\n")
        last_users = users
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω user_id: {user_id}")

async def get_all_user_ids():
    global last_users
    content = await read_file(USERS_FILE)
    last_users = set(line.strip() for line in content.splitlines() if line.strip())
    return list(last_users)

async def is_code_used(code):
    global last_used_codes
    content = await read_file(USED_CODES_FILE)
    used = set(content.splitlines())
    last_used_codes = used
    return code in used

async def mark_code_used(code):
    global last_used_codes
    content = await read_file(USED_CODES_FILE)
    used = set(content.splitlines())
    used.add(code)
    await write_file(USED_CODES_FILE, "\n".join(used) + "\n")
    last_used_codes = used
    logging.info(f"–ö–æ–¥ {code} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π")

def generate_code():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=6))

def get_total_bonus(client):
    return sum(b["amount"] for b in client["bonuses"] if not is_expired(b["date"]))

async def is_referred_user(user_id):
    clients = await load_clients()
    return any(client["telegram_id"] == str(user_id) for client in clients.values())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üìç –ö–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏', callback_data='geo')],
    [InlineKeyboardButton(text='üéÅ –ë–æ–Ω—É—Å—ã', callback_data='bonus')],
    [InlineKeyboardButton(text='üî• –¢–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏', callback_data='action')],
    [InlineKeyboardButton(text='‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)', callback_data='faq')]
])

referred_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üí∞ –ú–æ–∏ –±–æ–Ω—É—Å—ã', callback_data='check_bonus')],
    [InlineKeyboardButton(text='üìú –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤', callback_data='bonus_rules')],
    [InlineKeyboardButton(text='üõç –°–æ–æ–±—â–∏—Ç—å –æ –ø–æ–∫—É–ø–∫–µ', callback_data='shopping')],
    [InlineKeyboardButton(text='üí∏ –°–ø–∏—Å–∞—Ç—å –±–æ–Ω—É—Å—ã', callback_data='use_bonus')],
    [InlineKeyboardButton(text='üîë –ú–æ–π –∫–æ–¥', callback_data='show_code')],
    [InlineKeyboardButton(text='üì© –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data='question')],
    [InlineKeyboardButton(text='üìç –ö–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏', callback_data='geo')],
    [InlineKeyboardButton(text='üî• –¢–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏', callback_data='action')],
    [InlineKeyboardButton(text='‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)', callback_data='faq')],
    [InlineKeyboardButton(text='üï∞Ô∏è –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã', callback_data='clock')]
])

bonus_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='registration')]
])

faq_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üï∞Ô∏è –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã', callback_data='clock')],
    [InlineKeyboardButton(text='üöö –ï—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞?', callback_data='delivery')],
    [InlineKeyboardButton(text='üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã', callback_data='work')],
    [InlineKeyboardButton(text='üè¨ –ö–∞–∫ –Ω–∞–π—Ç–∏ –º–∞–≥–∞–∑–∏–Ω', callback_data='where')],
    [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back')]
])

admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üì¢ –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ü–∏—é', callback_data='admin_update_promo')],
    [InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –∞–∫—Ü–∏—é', callback_data='admin_delete_promo')],
    [InlineKeyboardButton(text='üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥', callback_data='admin_check_code')],
    [InlineKeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤', callback_data='admin_list_clients')],
    [InlineKeyboardButton(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='admin_stats')]
])

def get_confirm_keyboard(user_id, is_spend=False):
    prefix = "spend_" if is_spend else "confirm_"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"{prefix}{user_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")]
    ])

def get_reply_keyboard(user_id, message_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}_{message_id}")]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command('start'))
async def welcome(message: Message):
    user_id = message.from_user.id
    await add_user_id(user_id)
    code = message.text.split()[-1] if len(message.text.split()) > 1 else None

    if code:
        if await is_code_used(code):
            await message.answer(
                "–≠—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ –∞–¥—Ä–µ—Å—É: –ø—Ä–æ—Å–ø–µ–∫—Ç –ì–µ–Ω–µ—Ä–∞–ª–∞ –û—Å—Ç—Ä—è–∫–æ–≤–∞, 60.",
                parse_mode="HTML"
            )
            logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞: {code} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            return

        clients = await load_clients()
        if code in clients:
            await message.answer(
                "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ.",
                parse_mode="HTML",
                reply_markup=referred_keyboard
            )
            return

        clients[code] = {
            'code': code,
            'telegram_id': str(user_id),
            'bonuses': [{'amount': 50, 'date': today_str()}]
        }
        await save_clients(clients)
        await mark_code_used(code)
        await message.answer(
            f"üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n\n"
            f"–í–∞—à –∫–æ–¥: {code}\n\n"
            f"–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ 50 –±–æ–Ω—É—Å–æ–≤ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –Ω–∞ –ª—é–±–æ–π —Ç–æ–≤–∞—Ä (–¥–æ 50% —Å—Ç–æ–∏–º–æ—Å—Ç–∏).\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá",
            reply_markup=referred_keyboard,
            parse_mode="HTML"
        )
        logging.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è user_id {user_id} –ø–æ –∫–æ–¥—É {code}, +50 –±–æ–Ω—É—Å–æ–≤")
    else:
        clients = await load_clients()
        if await is_referred_user(user_id):
            await message.answer(
                f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ '–ß–∞—Å –´'! ‚åö\n\n"
                f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá",
                reply_markup=referred_keyboard,
                parse_mode="HTML"
            )
        else:
            await message.answer(
                f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ '–ß–∞—Å –´'! ‚åö\n\n"
                f"–£ –Ω–∞—Å —Å–∞–º—ã–µ –ª—É—á—à–∏–µ —á–∞—Å—ã –≤ –≥–æ—Ä–æ–¥–µ! üíé\n\n"
                f"–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá",
                reply_markup=main_keyboard,
                parse_mode="HTML"
            )

@dp.message(Command('admin'))
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_keyboard)

@dp.callback_query(F.data == 'admin_update_promo')
async def admin_update_promo(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –°–∫–∏–¥–∫–∞ 20% –¥–æ 31 –∞–≤–≥—É—Å—Ç–∞!):")
    user_context['waiting_for_promo'] = callback.from_user.id
    await callback.answer()

@dp.callback_query(F.data == 'admin_delete_promo')
async def admin_delete_promo(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    try:
        global last_promo_text
        await write_file(PROMO_FILE, "–ê–∫—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n")
        last_promo_text = "–ê–∫—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã."
        for uid in await get_all_user_ids():
            try:
                await bot.send_message(
                    uid,
                    f"üì¢ –¢–µ–∫—É—â–∞—è –∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –∞–∫—Ü–∏—è–º–∏ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ! üòä",
                    parse_mode="HTML",
                    reply_markup=referred_keyboard if await is_referred_user(int(uid)) else main_keyboard
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫—Ü–∏–∏ user_id {uid}: {e}")
        await callback.message.answer("–ê–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.", reply_markup=admin_keyboard)
        logging.info("–ê–¥–º–∏–Ω —É–¥–∞–ª–∏–ª –∞–∫—Ü–∏—é")
    except Exception as e:
        await callback.message.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ü–∏–∏.", reply_markup=admin_keyboard)
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ü–∏–∏: {e}")
    await callback.answer()

@dp.message(lambda message: user_context.get('waiting_for_promo') == message.from_user.id)
async def process_promo(message: Message):
    user_context.pop('waiting_for_promo', None)
    if message.from_user.id != ADMIN_ID:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    text = message.text.strip()
    if not text:
        await message.answer("–¢–µ–∫—Å—Ç –∞–∫—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    try:
        global last_promo_text
        await write_file(PROMO_FILE, text + "\n")
        last_promo_text = text
        for uid in await get_all_user_ids():
            try:
                await bot.send_message(
                    uid,
                    f"üì¢ –£ –Ω–∞—Å –Ω–æ–≤–∞—è –∞–∫—Ü–∏—è!\n\n{text}",
                    parse_mode="HTML",
                    reply_markup=referred_keyboard if await is_referred_user(int(uid)) else main_keyboard
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é user_id {uid}: {e}")
        await message.answer("–ê–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=admin_keyboard)
        logging.info(f"–ê–¥–º–∏–Ω –æ–±–Ω–æ–≤–∏–ª –∞–∫—Ü–∏—é: {text}")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏–∏.")
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏–∏: {e}")

@dp.callback_query(F.data == 'admin_check_code')
async def admin_check_code(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞:")
    user_context['waiting_for_code'] = callback.from_user.id
    await callback.answer()

@dp.message(lambda message: user_context.get('waiting_for_code') == message.from_user.id)
async def process_check_code(message: Message):
    user_context.pop('waiting_for_code', None)
    if message.from_user.id != ADMIN_ID:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    code = message.text.strip()
    clients = await load_clients()
    if code in clients:
        total = get_total_bonus(clients[code])
        await message.answer(
            f"–î–ª—è –∫–æ–¥–∞ {code}:\n–ë–æ–Ω—É—Å–æ–≤: {total}\nTelegram ID: {clients[code]['telegram_id']}",
            reply_markup=admin_keyboard
        )
    else:
        await message.answer("–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=admin_keyboard)

@dp.callback_query(F.data == 'admin_list_clients')
async def admin_list_clients(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    clients = await load_clients()
    if not clients:
        await callback.message.answer("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.", reply_markup=admin_keyboard)
        return
    response = "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n"
    for code, client in clients.items():
        total = get_total_bonus(client)
        response += f"–ö–æ–¥: {code}, –ë–æ–Ω—É—Å–æ–≤: {total}, Telegram ID: {client['telegram_id']}\n"
    await callback.message.answer(response, reply_markup=admin_keyboard)
    await callback.answer()

@dp.callback_query(F.data == 'admin_stats')
async def admin_stats(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    clients = await load_clients()
    users = await get_all_user_ids()
    total_bonuses = sum(get_total_bonus(client) for client in clients.values())
    response = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–ö–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
        f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤: {total_bonuses}"
    )
    await callback.message.answer(response, reply_markup=admin_keyboard)
    await callback.answer()

@dp.callback_query(F.data == 'geo')
async def gps(callback: CallbackQuery):
    await callback.message.answer(
        f"–ü—Ä–æ—Å–ø–µ–∫—Ç –ì–µ–Ω–µ—Ä–∞–ª–∞ –û—Å—Ç—Ä—è–∫–æ–≤–∞, 60\n\n"
        f"–ú—ã –Ω–∞ –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–∞—Ö: <a href=\"https://yandex.ru/maps/-/CHdXEEmx\">–æ—Ç–∫—Ä—ã—Ç—å</a>",
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == 'bonus')
async def bonus_program(callback: CallbackQuery):
    if await is_referred_user(callback.from_user.id):
        await callback.message.answer(
            f"–°–æ–±–∏—Ä–∞–π—Ç–µ –±–æ–Ω—É—Å—ã ‚Äî 5% –æ—Ç –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ —á–∞—Å–æ–≤. –¢—Ä–∞—Ç—å—Ç–µ –Ω–∞ –ª—é–±–æ–π —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω–µ!",
            reply_markup=referred_keyboard,
            parse_mode="HTML"
        )
    else:
        await callback.message.answer(
            f"–°–æ–±–∏—Ä–∞–π—Ç–µ –±–æ–Ω—É—Å—ã ‚Äî 5% –æ—Ç –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ —á–∞—Å–æ–≤. –¢—Ä–∞—Ç—å—Ç–µ –Ω–∞ –ª—é–±–æ–π —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω–µ!\n\n"
            f"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.",
            reply_markup=bonus_keyboard,
            parse_mode="HTML"
        )
    await callback.answer()

@dp.callback_query(F.data == 'bonus_rules')
async def bonus_rules(callback: CallbackQuery):
    await callback.message.answer(
        "üìú –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤:\n"
        "- –ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –≤ —Ä–∞–∑–º–µ—Ä–µ 5% –æ—Ç —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏.\n"
        "- –ë–æ–Ω—É—Å—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã –¥–æ 50% —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞.\n"
        "- –ë–æ–Ω—É—Å—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã 180 –¥–Ω–µ–π —Å –¥–∞—Ç—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è.\n"
        "- –î–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ –ø–æ–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–¥ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.",
        parse_mode="HTML",
        reply_markup=referred_keyboard
    )
    await callback.answer()

@dp.callback_query(F.data == 'registration')
async def registration_info(callback: CallbackQuery):
    await callback.message.answer(
        f"–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.",
        parse_mode="HTML",
        reply_markup=main_keyboard
    )
    await callback.answer()

@dp.callback_query(F.data == 'shopping')
async def ask_amount(callback: CallbackQuery):
    if not ADMIN_ID:
        await callback.message.answer(
            "–û—à–∏–±–∫–∞: –∞–¥–º–∏–Ω –Ω–µ —É–∫–∞–∑–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ –∞–¥—Ä–µ—Å—É: –ø—Ä–æ—Å–ø–µ–∫—Ç –ì–µ–Ω–µ—Ä–∞–ª–∞ –û—Å—Ç—Ä—è–∫–æ–≤–∞, 60.",
            parse_mode="HTML"
        )
        logging.error("ADMIN_ID –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    if not await is_referred_user(callback.from_user.id):
        await callback.message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.",
            reply_markup=main_keyboard,
            parse_mode="HTML"
        )
        return
    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8500) –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤.",
        parse_mode="HTML"
    )
    user_context['waiting_for_purchase_amount'] = callback.from_user.id
    await callback.answer()

@dp.message(lambda message: user_context.get('waiting_for_purchase_amount') == message.from_user.id)
async def receive_purchase(message: Message):
    user_context.pop('waiting_for_purchase_amount', None)
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8500).", reply_markup=referred_keyboard)
        return
    amount = int(message.text)
    if amount < 500:
        await message.answer("–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è. –ú–∏–Ω–∏–º—É–º - 500 —Ä—É–±.", reply_markup=referred_keyboard)
        return
    bonus = int(amount * 0.05)
    user_id = message.from_user.id
    pending_requests[user_id] = {
        'amount': amount,
        'bonus': bonus,
        'telegram_id': str(user_id)
    }
    await bot.send_message(
        ADMIN_ID,
        f"üì¢ –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!\n–ö–ª–∏–µ–Ω—Ç user_id {user_id}\n–°—É–º–º–∞: {amount} ‚ÇΩ\n–ë–æ–Ω—É—Å–æ–≤ –∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—é: {bonus}",
        reply_markup=get_confirm_keyboard(user_id),
        parse_mode="HTML"
    )
    await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –±–æ–Ω—É—Å—ã.", reply_markup=referred_keyboard)

@dp.callback_query(F.data == "check_bonus")
async def check_bonus(callback: CallbackQuery):
    clients = await load_clients()
    user_id = str(callback.from_user.id)
    for data in clients.values():
        if data["telegram_id"] == user_id:
            total = get_total_bonus(data)
            expiring = sum(b["amount"] for b in data["bonuses"] if (datetime.now() - datetime.strptime(b["date"], "%Y-%m-%d")).days > 150)
            msg = f"–£ –≤–∞—Å {total} –±–æ–Ω—É—Å–æ–≤."
            if expiring > 0:
                msg += f"\n‚ö†Ô∏è {expiring} –±–æ–Ω—É—Å–æ–≤ –∏—Å—Ç–µ–∫—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π!"
            await callback.message.answer(msg, reply_markup=referred_keyboard)
            await callback.answer()
            return
    await callback.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=main_keyboard)

@dp.callback_query(F.data == 'use_bonus')
async def use_bonus(callback: CallbackQuery):
    if not ADMIN_ID:
        await callback.message.answer(
            "–û—à–∏–±–∫–∞: –∞–¥–º–∏–Ω –Ω–µ —É–∫–∞–∑–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ –∞–¥—Ä–µ—Å—É: –ø—Ä–æ—Å–ø–µ–∫—Ç –ì–µ–Ω–µ—Ä–∞–ª–∞ –û—Å—Ç—Ä—è–∫–æ–≤–∞, 60.",
            parse_mode="HTML"
        )
        logging.error("ADMIN_ID –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    clients = await load_clients()
    user_id = str(callback.from_user.id)
    code = next((c for c, client in clients.items() if client["telegram_id"] == user_id), None)
    if not code:
        await callback.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=main_keyboard)
        return
    total = get_total_bonus(clients[code])
    if total == 0:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –±–æ–Ω—É—Å–æ–≤.", reply_markup=referred_keyboard)
        return
    await callback.message.answer(
        f"–£ –≤–∞—Å {total} –±–æ–Ω—É—Å–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ (—Ä—É–±), —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 50% —Å—Ç–æ–∏–º–æ—Å—Ç–∏). –ü–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–¥ {code} –≤ –º–∞–≥–∞–∑–∏–Ω–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )
    user_context['waiting_for_use_bonus'] = user_id
    await callback.answer()

@dp.callback_query(F.data == 'show_code')
async def show_code(callback: CallbackQuery):
    clients = await load_clients()
    user_id = str(callback.from_user.id)
    code = next((c for c, client in clients.items() if client["telegram_id"] == user_id), None)
    if code:
        await callback.message.answer(f"–í–∞—à –∫–æ–¥: {code}", reply_markup=referred_keyboard)
    else:
        await callback.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=main_keyboard)
    await callback.answer()

@dp.message(lambda message: user_context.get('waiting_for_use_bonus') == str(message.from_user.id))
async def process_use_bonus(message: Message):
    user_id = str(message.from_user.id)
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8500).", reply_markup=referred_keyboard)
        user_context.pop('waiting_for_use_bonus', None)
        return
    amount = int(message.text)
    clients = await load_clients()
    code = next((c for c, client in clients.items() if client["telegram_id"] == user_id), None)
    if not code:
        await message.answer("–û—à–∏–±–∫–∞: –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_keyboard)
        user_context.pop('waiting_for_use_bonus', None)
        return
    total_bonuses = get_total_bonus(clients[code])
    max_discount = amount // 2
    use_bonuses = min(total_bonuses, max_discount)
    if use_bonuses == 0:
        await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è.", reply_markup=referred_keyboard)
        user_context.pop('waiting_for_use_bonus', None)
        return
    remaining = total_bonuses - use_bonuses
    pending_spend_requests[user_id] = {
        'amount': amount,
        'use_bonuses': use_bonuses,
        'remaining': remaining,
        'code': code
    }
    await bot.send_message(
        ADMIN_ID,
        f"üì¢ –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤!\n–ö–æ–¥: {code}\n–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {amount} ‚ÇΩ\n–°–ø–∏—Å–∞—Ç—å: {use_bonuses} (–æ—Å—Ç–∞—Ç–æ–∫: {remaining})\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –∫–æ–≥–¥–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–∫–∞–∂–µ—Ç –∫–æ–¥ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.",
        reply_markup=get_confirm_keyboard(user_id, is_spend=True),
        parse_mode="HTML"
    )
    await message.answer(f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç —Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–∫–∞–∂–∏—Ç–µ –∫–æ–¥ {code} –≤ –º–∞–≥–∞–∑–∏–Ω–µ.", reply_markup=referred_keyboard)
    user_context.pop('waiting_for_use_bonus', None)

@dp.callback_query(F.data.startswith('confirm_'))
async def confirm_purchase(callback: CallbackQuery):
    clients = await load_clients()
    user_id = int(callback.data.split('_')[1])
    if user_id not in pending_requests:
        await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        logging.error(f"–ó–∞—è–≤–∫–∞ –¥–ª—è user_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    client_found = None
    for code, client in clients.items():
        if client['telegram_id'] == str(user_id):
            client_found = client
            break

    if client_found:
        bonus = pending_requests[user_id]['bonus']
        client_found['bonuses'].append({
            'amount': bonus,
            'date': today_str()
        })
        await save_clients(clients)
        await bot.send_message(
            user_id,
            f"üéâ –í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ {bonus} –±–æ–Ω—É—Å–æ–≤!",
            parse_mode="HTML",
            reply_markup=referred_keyboard
        )
        await callback.message.edit_text("‚úÖ –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ë–æ–Ω—É—Å—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã! üéä")
        logging.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: user_id {user_id}, +{bonus} –±–æ–Ω—É—Å–æ–≤")
    else:
        await bot.send_message(
            user_id,
            "–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ –∞–¥—Ä–µ—Å—É: –ø—Ä–æ—Å–ø–µ–∫—Ç –ì–µ–Ω–µ—Ä–∞–ª–∞ –û—Å—Ç—Ä—è–∫–æ–≤–∞, 60.",
            parse_mode="HTML",
            reply_markup=main_keyboard
        )
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        logging.error(f"–ö–ª–∏–µ–Ω—Ç user_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    del pending_requests[user_id]

@dp.callback_query(F.data.startswith('spend_'))
async def confirm_spend(callback: CallbackQuery):
    clients = await load_clients()
    user_id = int(callback.data.split('_')[1])
    if user_id not in pending_spend_requests:
        await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        logging.error(f"–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è user_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    code = pending_spend_requests[user_id]['code']
    client_found = None
    for c, client in clients.items():
        if client['telegram_id'] == str(user_id):
            client_found = client
            break

    if client_found:
        use_bonuses = pending_spend_requests[user_id]['use_bonuses']
        remaining = pending_spend_requests[user_id]['remaining']
        client_found['bonuses'] = []
        if remaining > 0:
            client_found['bonuses'].append({
                'amount': remaining,
                'date': today_str()
            })
        await save_clients(clients)
        await bot.send_message(
            user_id,
            f"‚úÖ –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {use_bonuses} –±–æ–Ω—É—Å–æ–≤! –û—Å—Ç–∞—Ç–æ–∫: {remaining} –±–æ–Ω—É—Å–æ–≤.\n\n"
            f"–ü–æ–∫–∞–∂–∏—Ç–µ –∫–æ–¥ {code} –≤ –º–∞–≥–∞–∑–∏–Ω–µ –¥–ª—è —Å–∫–∏–¥–∫–∏.",
            parse_mode="HTML",
            reply_markup=referred_keyboard
        )
        await callback.message.edit_text("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! üéä")
        logging.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–ø–∏—Å–∞–Ω–∏–µ: –∫–æ–¥ {code}, -{use_bonuses} –±–æ–Ω—É—Å–æ–≤, –æ—Å—Ç–∞—Ç–æ–∫ {remaining}")
    else:
        await bot.send_message(
            user_id,
            "–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ –∞–¥—Ä–µ—Å—É: –ø—Ä–æ—Å–ø–µ–∫—Ç –ì–µ–Ω–µ—Ä–∞–ª–∞ –û—Å—Ç—Ä—è–∫–æ–≤–∞, 60.",
            parse_mode="HTML",
            reply_markup=main_keyboard
        )
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        logging.error(f"–ö–ª–∏–µ–Ω—Ç user_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    del pending_spend_requests[user_id]

@dp.callback_query(F.data.startswith('reject_'))
async def reject_purchase(callback: CallbackQuery):
    user_id = int(callback.data.split('_')[1])
    if user_id in pending_requests:
        code = next((c for c, client in (await load_clients()).items() if client['telegram_id'] == str(user_id)), '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
        await bot.send_message(
            user_id,
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫—É–ø–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ –∞–¥—Ä–µ—Å—É: –ø—Ä–æ—Å–ø–µ–∫—Ç –ì–µ–Ω–µ—Ä–∞–ª–∞ –û—Å—Ç—Ä—è–∫–æ–≤–∞, 60.",
            parse_mode="HTML",
            reply_markup=referred_keyboard
        )
        await callback.message.edit_text("‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        logging.info(f"–ü–æ–∫—É–ø–∫–∞ –¥–ª—è –∫–æ–¥–∞ {code} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        del pending_requests[user_id]
    elif user_id in pending_spend_requests:
        code = pending_spend_requests[user_id]['code']
        await bot.send_message(
            user_id,
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ –∞–¥—Ä–µ—Å—É: –ø—Ä–æ—Å–ø–µ–∫—Ç –ì–µ–Ω–µ—Ä–∞–ª–∞ –û—Å—Ç—Ä—è–∫–æ–≤–∞, 60.",
            parse_mode="HTML",
            reply_markup=referred_keyboard
        )
        await callback.message.edit_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
        logging.info(f"–°–ø–∏—Å–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –∫–æ–¥–∞ {code} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        del pending_spend_requests[user_id]
    else:
        await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        logging.error(f"–ó–∞—è–≤–∫–∞ –¥–ª—è user_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

@dp.callback_query(F.data == "action")
async def action(callback: CallbackQuery):
    global last_promo_text
    try:
        current_promo = await get_promo_text()
        if last_promo_text == "–ê–∫—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.":
            last_promo_text = current_promo
            await callback.message.answer(current_promo, parse_mode="HTML")
        elif current_promo != last_promo_text:
            for uid in await get_all_user_ids():
                try:
                    await bot.send_message(
                        uid,
                        f"üì¢ –£ –Ω–∞—Å –Ω–æ–≤–∞—è –∞–∫—Ü–∏—è!\n\n{current_promo}",
                        parse_mode="HTML",
                        reply_markup=referred_keyboard if await is_referred_user(int(uid)) else main_keyboard
                    )
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é user_id {uid}: {e}")
            last_promo_text = current_promo
            await callback.message.answer(current_promo, parse_mode="HTML")
        else:
            await callback.message.answer(current_promo, parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ü–∏–∏: {e}")
        await callback.message.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π.", parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data == 'faq')
async def faq_question(callback: CallbackQuery):
    await callback.message.answer(
        "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –∏–ª–∏ —á–∞—Å–∞—Ö!",
        reply_markup=faq_keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == 'clock')
async def interesting_facts(callback: CallbackQuery):
    if not facts_for_clock:
        await callback.message.answer("–§–∞–∫—Ç—ã –æ —á–∞—Å–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        logging.error("–°–ø–∏—Å–æ–∫ facts_for_clock –ø—É—Å—Ç")
        await callback.answer()
        return
    fact = random.choice(facts_for_clock)
    await callback.message.answer(f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ —á–∞—Å–∞—Ö:\n\n{fact}", parse_mode="HTML")
    keyboard = referred_keyboard if await is_referred_user(callback.from_user.id) else main_keyboard
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá", reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data == 'delivery')
async def faq_delivery(callback: CallbackQuery):
    await callback.message.answer("–ú–∞–≥–∞–∑–∏–Ω \"–ß–∞—Å –´\" –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É—Å–ª—É–≥—É –¥–æ—Å—Ç–∞–≤–∫–∏", parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data == 'work')
async def faq_qwork(callback: CallbackQuery):
    await callback.message.answer("–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 10:00 –¥–æ 18:30", parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data == "where")
async def faq_where(callback: CallbackQuery):
    await callback.message.answer(
        "–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –¢–¶ \"–ü—Ä–∏–≤–µ—Ç–ª–∏–≤—ã–π\" –ø–æ –∞–¥—Ä–µ—Å—É: –ø—Ä–æ—Å–ø–µ–∫—Ç –ì–µ–Ω–µ—Ä–∞–ª–∞ –û—Å—Ç—Ä—è–∫–æ–≤–∞, 60.",
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == 'question')
async def my_question(callback: CallbackQuery):
    if not ADMIN_ID:
        await callback.message.answer(
            "–û—à–∏–±–∫–∞: –∞–¥–º–∏–Ω –Ω–µ —É–∫–∞–∑–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ –∞–¥—Ä–µ—Å—É: –ø—Ä–æ—Å–ø–µ–∫—Ç –ì–µ–Ω–µ—Ä–∞–ª–∞ –û—Å—Ç—Ä—è–∫–æ–≤–∞, 60.",
            parse_mode="HTML"
        )
        logging.error("ADMIN_ID –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    if not await is_referred_user(callback.from_user.id):
        await callback.message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.",
            reply_markup=main_keyboard,
            parse_mode="HTML"
        )
        return
    await callback.message.answer(
        f"üì© –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å.\n"
        "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è! ‚è≥",
        parse_mode="HTML"
    )
    user_context['waiting_for_question'] = callback.from_user.id
    await callback.answer()

@dp.message(lambda message: user_context.get('waiting_for_question') == message.from_user.id)
async def forward_question_to_admin(message: Message):
    user_id = message.from_user.id
    user_context.pop('waiting_for_question', None)
    try:
        forwarded = await bot.send_message(ADMIN_ID, message.text)
        await bot.send_message(
            ADMIN_ID,
            f"–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user_id: {user_id}):",
            reply_markup=get_reply_keyboard(user_id, forwarded.message_id),
            parse_mode="HTML"
        )
        await message.answer(
            "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            parse_mode="HTML",
            reply_markup=referred_keyboard
        )
        logging.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç user_id {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É")
    except Exception as e:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ –∞–¥—Ä–µ—Å—É: –ø—Ä–æ—Å–ø–µ–∫—Ç –ì–µ–Ω–µ—Ä–∞–ª–∞ –û—Å—Ç—Ä—è–∫–æ–≤–∞, 60.",
            parse_mode="HTML",
            reply_markup=referred_keyboard
        )
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç user_id {user_id}: {e}")

@dp.message(lambda message: message.from_user.id == ADMIN_ID and user_context.get('waiting_for_admin_reply') is not None)
async def send_admin_reply(message: Message):
    user_id = user_context.pop('waiting_for_admin_reply', None)
    if user_id:
        if len(message.text) > 4096:
            await message.answer("–û—à–∏–±–∫–∞: –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤).", reply_markup=admin_keyboard)
            return
        try:
            await bot.send_message(
                user_id,
                message.text,
                parse_mode="HTML",
                reply_markup=referred_keyboard
            )
            await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", reply_markup=admin_keyboard)
            logging.info(f"–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω user_id {user_id}")
        except Exception as e:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", reply_markup=admin_keyboard)
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ user_id {user_id}: {e}")

@dp.callback_query(F.data.startswith('reply_'))
async def reply_to_user(callback: CallbackQuery):
    data = callback.data.split('_')
    user_id = int(data[1])
    await callback.message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user_id: {user_id}):", parse_mode="HTML")
    user_context['waiting_for_admin_reply'] = user_id
    await callback.answer()

@dp.callback_query(F.data == 'back')
async def back_to_menu(callback: CallbackQuery):
    keyboard = referred_keyboard if await is_referred_user(callback.from_user.id) else main_keyboard
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

async def main():
    init_files()
    logging.info("–ë–æ—Ç '–ß–∞—Å –´' –∑–∞–ø—É—â–µ–Ω, –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
