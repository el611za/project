from aiogram.filters import Command
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from datetime import datetime, timedelta
import asyncio
import requests
import logging
import random
import string

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

API_TOKEN = '8130975273:AAE6GDAcZsmUCTQOJ3kfim0680SPYtAnmVQ'  # –¢–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 50371663  # –¢–≤–æ–π Telegram ID
DATA_FILE = 'clients.txt'
USERS_FILE = "users.txt"
USED_TOKENS_FILE = 'used_tokens.txt'
PROMO_URL = ''  # –£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–∫—Ü–∏–∏ –∏–ª–∏ –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º
last_promo_text = ""

facts_for_clock = [
    '–ü–µ—Ä–≤—ã–µ —á–∞—Å—ã: –°–∞–º—ã–µ —Ä–∞–Ω–Ω–∏–µ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ —á–∞—Å—ã –ø–æ—è–≤–∏–ª–∏—Å—å –≤ –ï–≤—Ä–æ–ø–µ –≤ XIII –≤–µ–∫–µ. –û–Ω–∏ –±—ã–ª–∏ –±–æ–ª—å—à–∏–º–∏ –±–∞—à–µ–Ω–Ω—ã–º–∏ —á–∞—Å–∞–º–∏, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –≤ —Ü–µ—Ä–∫–≤—è—Ö –∏ –º–æ–Ω–∞—Å—Ç—ã—Ä—è—Ö.',
    '–ö–∞—Ä–º–∞–Ω–Ω—ã–µ —á–∞—Å—ã: –í XVI –≤–µ–∫–µ –Ω–µ–º–µ—Ü–∫–∏–π —á–∞—Å–æ–≤—â–∏–∫ –ü–∏—Ç–µ—Ä –•–µ–Ω–ª—è–π–Ω —Å–æ–∑–¥–∞–ª –ø–µ—Ä–≤—ã–µ –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–ª–∏ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞—Ä—É—á–Ω—ã—Ö —á–∞—Å–æ–≤.',
    '–ù–∞—Ä—É—á–Ω—ã–µ —á–∞—Å—ã: –ù–∞—Ä—É—á–Ω—ã–µ —á–∞—Å—ã —Å—Ç–∞–ª–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ XX –≤–µ–∫–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ—Å–ª–µ –ü–µ—Ä–≤–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω—ã, –∫–æ–≥–¥–∞ —Å–æ–ª–¥–∞—Ç—ã –æ—Ü–µ–Ω–∏–ª–∏ –∏—Ö —É–¥–æ–±—Å—Ç–≤–æ.',
    '–ö–≤–∞—Ä—Ü–µ–≤—ã–π –ø—Ä–æ—Ä—ã–≤: –í 1969 –≥–æ–¥—É –∫–æ–º–ø–∞–Ω–∏—è Seiko –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –ø–µ—Ä–≤—ã–µ –∫–≤–∞—Ä—Ü–µ–≤—ã–µ —á–∞—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–±–µ—Å–ø–µ—á–∏–ª–∏ –Ω–µ–±—ã–≤–∞–ª—É—é —Ç–æ—á–Ω–æ—Å—Ç—å —Ö–æ–¥–∞.',
    '–°–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ —á–∞—Å—ã: –ß–∞—Å—ã Graff Diamonds Hallucination —Å—Ç–æ—è—Ç 55 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –¥–æ–ª–ª–∞—Ä–æ–≤ –∏ —É–∫—Ä–∞—à–µ–Ω—ã 110 –∫–∞—Ä–∞—Ç–∞–º–∏ —Ä–µ–¥–∫–∏—Ö –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤.',
    '–ß–∞—Å—ã –≤ –∫–æ—Å–º–æ—Å–µ: Omega Speedmaster Professional —Å—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã–º–∏ —á–∞—Å–∞–º–∏, –ø–æ–±—ã–≤–∞–≤—à–∏–º–∏ –Ω–∞ –õ—É–Ω–µ –≤–æ –≤—Ä–µ–º—è –º–∏—Å—Å–∏–∏ Apollo 11 –≤ 1969 –≥–æ–¥—É.',
    '–ê–Ω—Ç–∏–∫–≤–∞—Ä–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: –ß–∞—Å—ã Patek Philippe Henry Graves Supercomplication, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤ 1933 –≥–æ–¥—É, –±—ã–ª–∏ –ø—Ä–æ–¥–∞–Ω—ã –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ –∑–∞ 24 –º–∏–ª–ª–∏–æ–Ω–∞ –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ 2014 –≥–æ–¥—É.',
    '–í–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å: –ü–µ—Ä–≤—ã–µ –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—ã–µ —á–∞—Å—ã, Rolex Oyster, –±—ã–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ 1926 –≥–æ–¥—É. –ò—Ö –∏—Å–ø—ã—Ç–∞–ª–∞ –ø–ª–æ–≤—á–∏—Ö–∞ –ú–µ—Ä—Å–µ–¥–µ—Å –ì–ª—è–π—Ç—Ü–µ, –ø–µ—Ä–µ–ø–ª—ã–≤ –õ–∞-–ú–∞–Ω—à.',
    '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ö–∞–Ω–∏–∑–º: –ü–µ—Ä–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —á–∞—Å—ã —Å –∞–≤—Ç–æ–ø–æ–¥–∑–∞–≤–æ–¥–æ–º –±—ã–ª–∏ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω—ã –≤ 1770 –≥–æ–¥—É, –Ω–æ –º–∞—Å—Å–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –Ω–∞—á–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –≤ XX –≤–µ–∫–µ.',
    '–ß–∞—Å—ã –±–µ–∑ —Å—Ç—Ä–µ–ª–æ–∫: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±—Ä–µ–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ Ressence, —Å–æ–∑–¥–∞—é—Ç —á–∞—Å—ã –±–µ–∑ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–µ–ª–æ–∫, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Ä–∞—â–∞—é—â–∏–µ—Å—è –¥–∏—Å–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.',
    '–®–≤–µ–π—Ü–∞—Ä—Å–∫–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ: –®–≤–µ–π—Ü–∞—Ä–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –æ–∫–æ–ª–æ 30 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —á–∞—Å–æ–≤ –≤ –≥–æ–¥, —á—Ç–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ª–∏—à—å 2% –æ—Ç –º–∏—Ä–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –Ω–æ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç –≤ —Å–µ–≥–º–µ–Ω—Ç–µ –ª—é–∫—Å–æ–≤—ã—Ö —á–∞—Å–æ–≤.',
    '–ß–∞—Å—ã —Å —Ç—É—Ä–±–∏–π–æ–Ω–æ–º: –¢—É—Ä–±–∏–π–æ–Ω, –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–π –≤ 1795 –≥–æ–¥—É –ê–±—Ä–∞—Ö–∞–º–æ–º-–õ—É–∏ –ë—Ä–µ–≥–µ—Ç–æ–º, –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏, –ø–æ–≤—ã—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö —á–∞—Å–æ–≤.',
    '–°–æ–ª–Ω–µ—á–Ω—ã–µ —á–∞—Å—ã: –°–∞–º—ã–µ –¥—Ä–µ–≤–Ω–∏–µ —á–∞—Å—ã ‚Äî —Å–æ–ª–Ω–µ—á–Ω—ã–µ ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –µ—â–µ –≤ –î—Ä–µ–≤–Ω–µ–º –ï–≥–∏–ø—Ç–µ –æ–∫–æ–ª–æ 1500 –≥–æ–¥–∞ –¥–æ –Ω.—ç.',
    '–ê—Ç–æ–º–Ω—ã–µ —á–∞—Å—ã: –°–∞–º—ã–µ —Ç–æ—á–Ω—ã–µ —á–∞—Å—ã –≤ –º–∏—Ä–µ, –∞—Ç–æ–º–Ω—ã–µ, –æ—à–∏–±–∞—é—Ç—Å—è –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É –∑–∞ 100 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ª–µ—Ç. –û–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ GPS –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.',
    '–£–º–Ω—ã–µ —á–∞—Å—ã: –ü–µ—Ä–≤—ã–µ —Å–º–∞—Ä—Ç-—á–∞—Å—ã, IBM WatchPad, –ø–æ—è–≤–∏–ª–∏—Å—å –≤ 2001 –≥–æ–¥—É, –Ω–æ –Ω–∞—Å—Ç–æ—è—â—É—é –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —ç—Ç–æ—Ç —Å–µ–≥–º–µ–Ω—Ç –æ–±—Ä–µ–ª —Å –≤—ã—Ö–æ–¥–æ–º Apple Watch –≤ 2015 –≥–æ–¥—É.'
]

user_context = {}
pending_requests = {}
pending_spend_requests = {}

dp = Dispatcher()
bot = Bot(token=API_TOKEN)

def add_user_id(user_id):
    user_id = str(user_id)
    try:
        with open(USERS_FILE, "r+", encoding="utf-8") as f:
            ids = f.read().splitlines()
            if user_id not in ids:
                f.write(user_id + "\n")
                logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω user_id: {user_id}")
    except FileNotFoundError:
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            f.write(user_id + "\n")
            logging.info(f"–°–æ–∑–¥–∞–Ω {USERS_FILE}, –¥–æ–±–∞–≤–ª–µ–Ω user_id: {user_id}")

def get_all_user_ids():
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        logging.warning(f"{USERS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â—ë–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
        return []

def today_str():
    return datetime.now().strftime("%Y-%m-%d")

def is_expired(date_str):
    try:
        date = datetime.strptime(date_str, "%Y-%m-%d")
        return (datetime.now() - date) > timedelta(days=180)
    except ValueError:
        logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}")
        return True

def get_promo_text():
    if not PROMO_URL:
        return "–ê–∫—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã."
    try:
        response = requests.get(PROMO_URL, timeout=10)
        response.encoding = 'utf-8'
        return response.text.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ü–∏–∏: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def load_clients():
    clients = {}
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()

        i = 0
        while i < len(lines):
            line = lines[i].strip()
            if not line:
                i += 1
                continue

            if not line.startswith("bonus:"):
                parts = line.split(",")
                if len(parts) >= 2:
                    token = parts[0]
                    clients[token] = {
                        "token": token,
                        "telegram_id": parts[1],
                        "bonuses": []
                    }
            else:
                bonus_parts = line.split(":")
                if len(bonus_parts) == 3 and 'token' in locals():
                    if not is_expired(bonus_parts[2]):
                        clients[token]["bonuses"].append({
                            "amount": int(bonus_parts[1]),
                            "date": bonus_parts[2]
                        })
            i += 1
    except FileNotFoundError:
        logging.info(f"{DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π")
        open(DATA_FILE, "w", encoding="utf-8").close()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ clients.txt: {e}")
    return clients

def save_clients(clients):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            for client in clients.values():
                valid_bonuses = [b for b in client["bonuses"] if not is_expired(b["date"])]
                client["bonuses"] = valid_bonuses
                f.write(f"{client['token']},{client['telegram_id']}\n")
                for b in valid_bonuses:
                    f.write(f"bonus:{b['amount']}:{b['date']}\n")
        logging.info("clients.txt —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è clients.txt: {e}")

def generate_token():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=6))

def get_total_bonus(client):
    return sum(b["amount"] for b in client["bonuses"] if not is_expired(b["date"]))

def is_token_used(token):
    try:
        with open(USED_TOKENS_FILE, "r", encoding="utf-8") as f:
            used = f.read().splitlines()
            return token in used
    except FileNotFoundError:
        logging.info(f"{USED_TOKENS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π")
        open(USED_TOKENS_FILE, "w", encoding="utf-8").close()
    return False

def mark_token_used(token):
    try:
        with open(USED_TOKENS_FILE, "a", encoding="utf-8") as f:
            f.write(token + "\n")
        logging.info(f"Token {token} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ used_tokens.txt: {e}")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üìç –ö–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏', callback_data='geo')],
    [InlineKeyboardButton(text='üéÅ –ë–æ–Ω—É—Å—ã', callback_data='bonus')],
    [InlineKeyboardButton(text='üî• –¢–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏', callback_data='action')],
    [InlineKeyboardButton(text='‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)', callback_data='faq')]
])

faq_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üï∞Ô∏è –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã', callback_data='clock')],
    [InlineKeyboardButton(text='üöö –ï—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞?', callback_data='delivery')],
    [InlineKeyboardButton(text='üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã', callback_data='work')],
    [InlineKeyboardButton(text='üè¨ –ö–∞–∫ –Ω–∞–π—Ç–∏ –º–∞–≥–∞–∑–∏–Ω', callback_data='where')],
    [InlineKeyboardButton(text='üì© –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å', callback_data='question')],
    [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back')]
])

bonus_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='registration')],
    [InlineKeyboardButton(text='üõç –°–æ–æ–±—â–∏—Ç—å –æ –ø–æ–∫—É–ø–∫–µ', callback_data='shopping')],
    [InlineKeyboardButton(text='üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ–Ω—É—Å—ã', callback_data='check_bonus')],
    [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back')]
])

def get_confirm_keyboard(user_id, is_spend=False):
    prefix = "spend_" if is_spend else "confirm_"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"{prefix}{user_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")]
    ])

@dp.message(Command('start'))
async def welcome(message: Message):
    user_id = message.from_user.id
    add_user_id(user_id)
    token = message.text.split()[-1] if len(message.text.split()) > 1 else None

    if token:
        if is_token_used(token):
            await message.answer(
                "–≠—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω.",
                parse_mode="HTML"
            )
            logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è token: {token} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            return

        clients = load_clients()
        if token in clients:
            await message.answer(
                "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ.",
                parse_mode="HTML"
            )
            return

        clients[token] = {
            'token': token,
            'telegram_id': str(user_id),
            'bonuses': [{'amount': 50, 'date': today_str()}]
        }
        save_clients(clients)
        mark_token_used(token)
        await message.answer(
            f"üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n\n"
            f"–í–∞—à token: {token}\n\n"
            f"–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ 50 –±–æ–Ω—É—Å–æ–≤ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –Ω–∞ –ª—é–±–æ–π —Ç–æ–≤–∞—Ä (–¥–æ 50% —Å—Ç–æ–∏–º–æ—Å—Ç–∏).\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        logging.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è user_id {user_id} –ø–æ token {token}, +50 –±–æ–Ω—É—Å–æ–≤")
    else:
        await message.answer(
            f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ '–ß–∞—Å –´'! ‚åö\n\n"
            f"–£ –Ω–∞—Å —Å–∞–º—ã–µ –ª—É—á—à–∏–µ —á–∞—Å—ã –≤ –≥–æ—Ä–æ–¥–µ! üíé\n\n"
            f"–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

@dp.callback_query(F.data == 'geo')
async def gps(callback: CallbackQuery):
    await callback.message.answer(
        f"–ü—Ä–æ—Å–ø–µ–∫—Ç –ì–µ–Ω–µ—Ä–∞–ª–∞ –û—Å—Ç—Ä—è–∫–æ–≤–∞, 60\n\n"
        f"–ú—ã –Ω–∞ –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–∞—Ö: <a href=\"https://yandex.ru/maps/-/CHdXEEmx\">–æ—Ç–∫—Ä—ã—Ç—å</a>",
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == 'bonus')
async def bonus_program(callback: CallbackQuery):
    await callback.message.answer(
        f"–°–æ–±–∏—Ä–∞–π—Ç–µ –±–æ–Ω—É—Å—ã ‚Äî 5% –æ—Ç –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ —á–∞—Å–æ–≤. –¢—Ä–∞—Ç—å—Ç–µ –Ω–∞ –ª—é–±–æ–π —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω–µ!",
        reply_markup=bonus_keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == 'registration')
async def registration_info(callback: CallbackQuery):
    await callback.message.answer(
        f"–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.",
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == 'shopping')
async def ask_amount(callback: CallbackQuery):
    if not ADMIN_ID:
        await callback.message.answer(
            f"–û—à–∏–±–∫–∞: –∞–¥–º–∏–Ω –Ω–µ —É–∫–∞–∑–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω.",
            parse_mode="HTML"
        )
        logging.error("ADMIN_ID –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8500)",
        parse_mode="HTML"
    )
    await callback.answer()

@dp.message(F.text.isdigit())
async def receive(message: Message):
    if not ADMIN_ID:
        await message.answer(
            f"–û—à–∏–±–∫–∞: –∞–¥–º–∏–Ω –Ω–µ —É–∫–∞–∑–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω.",
            parse_mode="HTML"
        )
        logging.error("ADMIN_ID –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    amount = int(message.text)
    if amount < 500:
        await message.answer(
            f"–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è. –ú–∏–Ω–∏–º—É–º - 500 —Ä—É–±.",
            parse_mode="HTML"
        )
        return

    bonus = int(amount * 0.05)
    user_id = message.from_user.id
    pending_requests[user_id] = {
        'amount': amount,
        'bonus': bonus,
        'telegram_id': str(user_id)
    }
    await bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üì¢ –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!\n\n"
             f"–ö–ª–∏–µ–Ω—Ç: user_id {user_id}\n\n"
             f"–°—É–º–º–∞: {amount} ‚ÇΩ\n\n"
             f"–ë–æ–Ω—É—Å–æ–≤: {bonus}",
        reply_markup=get_confirm_keyboard(user_id),
        parse_mode="HTML"
    )
    await message.answer(
        f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –í–ª–∞–¥–µ–ª–µ—Ü –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –±–æ–Ω—É—Å—ã",
        parse_mode="HTML"
    )
    logging.info(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: user_id {user_id}, —Å—É–º–º–∞ {amount}, –±–æ–Ω—É—Å–æ–≤ {bonus}")

@dp.callback_query(F.data == "check_bonus")
async def check_bonus(callback: CallbackQuery):
    clients = load_clients()
    user_id = str(callback.from_user.id)
    for data in clients.values():
        if data["telegram_id"] == user_id:
            total = get_total_bonus(data)
            await callback.message.answer(
                f"–£ –≤–∞—Å {total} –±–æ–Ω—É—Å–æ–≤.",
                parse_mode="HTML"
            )
            await callback.answer()
            return
    await callback.message.answer(
        f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == 'use_bonus')
async def use_bonus(callback: CallbackQuery):
    if not ADMIN_ID:
        await callback.message.answer(
            f"–û—à–∏–±–∫–∞: –∞–¥–º–∏–Ω –Ω–µ —É–∫–∞–∑–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω.",
            parse_mode="HTML"
        )
        logging.error("ADMIN_ID –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    clients = load_clients()
    user_id = str(callback.from_user.id)
    for token, client in clients.items():
        if client["telegram_id"] == user_id:
            total = get_total_bonus(client)
            await callback.message.answer(
                f"–£ –≤–∞—Å {total} –±–æ–Ω—É—Å–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ (—Ä—É–±), —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã (–¥–æ 50% —Å—Ç–æ–∏–º–æ—Å—Ç–∏):",
                parse_mode="HTML"
            )
            user_context['waiting_for_use_bonus'] = user_id
            await callback.answer()
            return
    await callback.message.answer(
        f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!",
        parse_mode="HTML"
    )
    await callback.answer()

@dp.message(F.text.isdigit(), lambda message: user_context.get('waiting_for_use_bonus') == str(message.from_user.id))
async def process_use_bonus(message: Message):
    user_id = str(message.from_user.id)
    amount = int(message.text)
    clients = load_clients()

    token = None
    for t, client in clients.items():
        if client["telegram_id"] == user_id:
            token = t
            break

    if token is None:
        await message.answer(
            f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            parse_mode="HTML"
        )
        user_context.pop('waiting_for_use_bonus', None)
        return

    total_bonuses = get_total_bonus(clients[token])
    max_discount = amount // 2
    use_bonuses = min(total_bonuses, max_discount)

    if use_bonuses == 0:
        await message.answer(
            f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è45 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
            parse_mode="HTML"
        )
        user_context.pop('waiting_for_use_bonus', None)
        return

    pending_spend_requests[user_id] = {
        'amount': amount,
        'use_bonuses': use_bonuses,
        'token': token
    }
    try:
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üì¢ –ó–∞—è–≤–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤!\n\n"
                 f"–û—Ç token {token}\n\n"
                 f"–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {amount} ‚ÇΩ\n\n"
                 f"–•–æ—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {use_bonuses} –±–æ–Ω—É—Å–æ–≤",
            reply_markup=get_confirm_keyboard(user_id, is_spend=True),
            parse_mode="HTML"
        )
        await message.answer(
            f"–ó–∞—è–≤–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –í–ª–∞–¥–µ–ª–µ—Ü –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç.",
            parse_mode="HTML"
        )
        logging.info(f"–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ: token {token}, {use_bonuses} –±–æ–Ω—É—Å–æ–≤, —Å—É–º–º–∞ {amount}")
    except Exception as e:
        await message.answer(
            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ: {e}")
    user_context.pop('waiting_for_use_bonus', None)

@dp.callback_query(F.data.startswith('confirm_'))
async def confirm_purchase(callback: CallbackQuery):
    clients = load_clients()
    user_id = int(callback.data.split('_')[1])
    if user_id not in pending_requests:
        await callback.message.edit_text(
            f"‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            parse_mode="HTML"
        )
        logging.error(f"–ó–∞—è–≤–∫–∞ –¥–ª—è user_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    client_found = None
    for code, client in clients.items():
        if client['telegram_id'] == str(user_id):
            client_found = client
            break

    if client_found:
        bonus = pending_requests[user_id]['bonus']
        client_found['bonuses'].append({
            'amount': bonus,
            'date': today_str()
        })
        save_clients(clients)
        await bot.send_message(
            user_id,
            f"üéâ –í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ {bonus} –±–æ–Ω—É—Å–æ–≤!",
            parse_mode="HTML"
        )
        await callback.message.edit_text(
            f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ë–æ–Ω—É—Å—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã! üéä",
            parse_mode="HTML"
        )
        logging.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: user_id {user_id}, +{bonus} –±–æ–Ω—É—Å–æ–≤")
    else:
        await bot.send_message(
            user_id,
            f"–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            parse_mode="HTML"
        )
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            parse_mode="HTML"
        )
        logging.error(f"–ö–ª–∏–µ–Ω—Ç user_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    del pending_requests[user_id]

@dp.callback_query(F.data.startswith('spend_'))
async def confirm_spend(callback: CallbackQuery):
    clients = load_clients()
    user_id = int(callback.data.split('_')[1])
    if user_id not in pending_spend_requests:
        await callback.message.edit_text(
            f"‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            parse_mode="HTML"
        )
        logging.error(f"–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è user_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    token = pending_spend_requests[user_id]['token']
    client_found = None
    for t, client in clients.items():
        if client['telegram_id'] == str(user_id):
            client_found = client
            break

    if client_found:
        use_bonuses = pending_spend_requests[user_id]['use_bonuses']
        total_bonuses = get_total_bonus(client_found)
        remaining_bonuses = total_bonuses - use_bonuses
        client_found['bonuses'] = []
        if remaining_bonuses > 0:
            client_found['bonuses'].append({
                'amount': remaining_bonuses,
                'date': today_str()
            })
        save_clients(clients)
        await bot.send_message(
            user_id,
            f"‚úÖ –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {use_bonuses} –±–æ–Ω—É—Å–æ–≤! –û—Å—Ç–∞—Ç–æ–∫: {remaining_bonuses} –±–æ–Ω—É—Å–æ–≤.\n\n"
            f"–ü–æ–∫–∞–∂–∏—Ç–µ token {token} –≤ –º–∞–≥–∞–∑–∏–Ω–µ –¥–ª—è —Å–∫–∏–¥–∫–∏.",
            parse_mode="HTML"
        )
        await callback.message.edit_text(
            f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! üéä",
            parse_mode="HTML"
        )
        logging.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–ø–∏—Å–∞–Ω–∏–µ: token {token}, -{use_bonuses} –±–æ–Ω—É—Å–æ–≤, –æ—Å—Ç–∞—Ç–æ–∫ {remaining_bonuses}")
    else:
        await bot.send_message(
            user_id,
            f"–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            parse_mode="HTML"
        )
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            parse_mode="HTML"
        )
        logging.error(f"–ö–ª–∏–µ–Ω—Ç user_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    del pending_spend_requests[user_id]

@dp.callback_query(F.data.startswith('reject_'))
async def reject_purchase(callback: CallbackQuery):
    user_id = int(callback.data.split('_')[1])
    if user_id in pending_requests:
        token = pending_requests[user_id].get('token', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
        await bot.send_message(
            user_id,
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫—É–ø–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –º–∞–≥–∞–∑–∏–Ω.",
            parse_mode="HTML"
        )
        await callback.message.edit_text(
            f"‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
            parse_mode="HTML"
        )
        logging.info(f"–ü–æ–∫—É–ø–∫–∞ –¥–ª—è token {token} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        del pending_requests[user_id]
    elif user_id in pending_spend_requests:
        token = pending_spend_requests[user_id]['token']
        await bot.send_message(
            user_id,
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –º–∞–≥–∞–∑–∏–Ω.",
            parse_mode="HTML"
        )
        await callback.message.edit_text(
            f"‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.",
            parse_mode="HTML"
        )
        logging.info(f"–°–ø–∏—Å–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è token {token} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        del pending_spend_requests[user_id]
    else:
        await callback.message.edit_text(
            f"‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            parse_mode="HTML"
        )
        logging.error(f"–ó–∞—è–≤–∫–∞ –¥–ª—è user_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

@dp.callback_query(F.data == "action")
async def action(callback: CallbackQuery):
    global last_promo_text
    try:
        current_promo = get_promo_text()
        if last_promo_text == "":
            last_promo_text = current_promo
            await callback.message.answer(current_promo, parse_mode="HTML")
        elif current_promo != last_promo_text:
            for user_id in get_all_user_ids():
                try:
                    await bot.send_message(
                        user_id,
                        f"üì¢ –£ –Ω–∞—Å –Ω–æ–≤–∞—è –∞–∫—Ü–∏—è!\n\n"
                        f"üî• –û—Ç–∫—Ä–æ–π—Ç–µ ¬´–¢–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏¬ª ‚Üí –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É!",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é user_id {user_id}: {e}")
            last_promo_text = current_promo
            await callback.message.answer(current_promo, parse_mode="HTML")
        else:
            await callback.message.answer(current_promo, parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ü–∏–∏: {e}")
        await callback.message.answer(
            f"–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π.",
            parse_mode="HTML"
        )
    await callback.answer()

@dp.callback_query(F.data == 'faq')
async def faq_question(callback: CallbackQuery):
    await callback.message.answer(
        f"–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –∏–ª–∏ —á–∞—Å–∞—Ö!",
        reply_markup=faq_keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == 'clock')
async def interesting_facts(callback: CallbackQuery):
    if not facts_for_clock:
        await callback.message.answer(
            f"–§–∞–∫—Ç—ã –æ —á–∞—Å–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
            parse_mode="HTML"
        )
        logging.error(f"–°–ø–∏—Å–æ–∫ facts_for_clock –ø—É—Å—Ç")
        await callback.answer()
        return
    fact = random.choice(facts_for_clock)
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã _, * –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
    fact = fact.replace('_', r'\_').replace('*', r'\*')
    await callback.message.answer(
        f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ —á–∞—Å–∞—Ö:\n\n{fact}",
        parse_mode="HTML"
    )
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–∫—Ç user_id {callback.from_user.id}: {fact}")
    await callback.answer()

@dp.callback_query(F.data == 'delivery')
async def faq_delivery(callback: CallbackQuery):
    await callback.message.answer(
        f"–ú–∞–≥–∞–∑–∏–Ω \"–ß–∞—Å –´\" –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É—Å–ª—É–≥—É –¥–æ—Å—Ç–∞–≤–∫–∏",
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == 'work')
async def faq_qwork(callback: CallbackQuery):
    await callback.message.answer(
        f"–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 10:00 –¥–æ 18:30",
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "where")
async def faq_where(callback: CallbackQuery):
    await callback.message.answer(
        f"–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –¢–¶ \"–ü—Ä–∏–≤–µ—Ç–ª–∏–≤—ã–π\" –ø–æ –∞–¥—Ä–µ—Å—É: –ø—Ä–æ—Å–ø–µ–∫—Ç –ì–µ–Ω–µ—Ä–∞–ª–∞ –û—Å—Ç—Ä—è–∫–æ–≤–∞, 60.",
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == 'question')
async def my_question(callback: CallbackQuery):
    if not ADMIN_ID:
        await callback.message.answer(
            f"–û—à–∏–±–∫–∞: –∞–¥–º–∏–Ω –Ω–µ —É–∫–∞–∑–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω.",
            parse_mode="HTML"
        )
        logging.error("ADMIN_ID –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    await callback.message.answer(
        f"üì© –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.\n\n"
        f"–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è! ‚è≥",
        parse_mode="HTML"
    )
    user_context['waiting_for_question'] = callback.from_user.id
    await callback.answer()

@dp.message()
async def reply_to_user(message: Message):
    if user_context.get('waiting_for_question') == message.from_user.id:
        user_context.pop('waiting_for_question')
        try:
            fwd = await bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)
            user_context[fwd.message_id] = message.from_user.id
            await message.answer(
                f"–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                parse_mode="HTML"
            )
            logging.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç user_id {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É")
        except Exception as e:
            await message.answer(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç user_id {message.from_user.id}: {e}")
    elif message.from_user.id == ADMIN_ID and message.reply_to_message:
        user_id = user_context.get(message.reply_to_message.message_id)
        if user_id:
            try:
                await bot.copy_message(user_id, ADMIN_ID, message.message_id)
                await message.answer(
                    f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.",
                    parse_mode="HTML"
                )
                logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω user_id {user_id}")
            except Exception as e:
                await message.answer(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.",
                    parse_mode="HTML"
                )
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ user_id {user_id}: {e}")

@dp.callback_query(F.data == 'back')
async def background(callback: CallbackQuery):
    await callback.message.edit_text(
        f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

async def main():
    logging.info("–ë–æ—Ç '–ß–∞—Å –´' –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
